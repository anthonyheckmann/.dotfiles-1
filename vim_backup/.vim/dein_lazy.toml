## View
[[plugins]] # configurable statusline/tabline
  repo = 'itchyny/lightline.vim'
  on_path = '.*'
  hook_source = 'call dein_hook#lightline#source()'

[[plugins]] # language pack
  repo = 'sheerun/vim-polyglot'
  on_path = '.*'

[[plugins]] # display the indention levels
  repo = 'Yggdroot/indentLine'
  on_path = '.*'
  hook_source = '''
    if has('conceal')
      let g:indentLine_char='Â¦'
      let g:indentLine_color_term=239
    endif
  '''

[[plugins]] # highlight trailing whitespaces
  repo = 'bronson/vim-trailing-whitespace'
  on_path = '.*'

## Git
[[plugins]] # git wrapper
  repo = 'tpope/vim-fugitive'
  on_cmd = ['Gstatus', 'Gcommit', 'Gwrite', 'Git', 'Git!',
            'Gcd', 'Glcd', 'Ggrep', 'Glog']

[[plugins]] # shows a git diff in the 'gutter'
  repo = 'airblade/vim-gitgutter'
  on_path = '.*'

[[plugins]] # pleasant editing on commit messages
  repo = 'rhysd/committia.vim'
  on_path = '.*/COMMIT_EDITMSG'

## Editing
[[plugins]]
  repo = 'cohama/lexima.vim'
  on_path = '.*'

[[plugins]]
  repo = 'ConradIrwin/vim-bracketed-paste'
  on_path = '.*'

# [[plugins]] # automatically insert pairs (brackets, quotes)
#   repo = 'seletskiy/vim-autosurround'

[[plugins]] # substitute preview
  repo = 'osyo-manga/vim-over'
  on_cmd = 'OverCommandLine'
  on_add = '''
    nnoremap <silent> <Leader>m :OverCommandLine<CR>
  '''

[[plugins]] # intensely orgasmic commenting
  repo = 'scrooloose/nerdcommenter'
  on_map = '<Plug>NERDCommenterToggle'
  hook_add = '''
    let g:NERDSpaceDelims=1
    let g:NERDShutUp=1
    nmap <Leader>c <Plug>NERDCommenterToggle
    vmap <Leader>c <Plug>NERDCommenterToggle
  '''

[[plugins]]
  repo = 'kana/vim-smartword'
  on_map = '<Plug>(smartword'
  hook_add = '''
    nmap w <Plug>(smartword-w)
    nmap b <Plug>(smartword-b)
    nmap e <Plug>(smartword-e)
  '''

[[plugins]]
  repo = 'junegunn/vim-easy-align'
  on_map = '<Plug>(EasyAlign)'
  hook_add = '''
    vmap <Enter> <Plug>(EasyAlign)
    nmap <Leader>a <Plug>(EasyAlign)
  '''

[[plugins]] # motions on speed
  repo = 'Lokaltog/vim-easymotion'
  on_map = '<Plug>(easymotion-s2)'
  hook_add = '''
    let g:EasyMotion_do_mapping = 0
    nmap s <Plug>(easymotion-s2)
  '''

[[plugins]] # universal interface
  repo = 'Shougo/unite.vim'
  on_cmd = 'Unite'

[[plugins]]
  repo = 'itchyny/dictionary.vim'
  if = 'has("mac")'
  on_cmd = 'Dictionary'
  hook_add = '''
    nnoremap <Leader>d :Dictionary<CR>
  '''

## Auto-completion
[[plugins]]
  repo = 'Shougo/neocomplete'
  if = 'has("lua")'
  on_path = '.*'
  hook_source = 'call dein_hook#neocomplete#source()'

[[plugins]]
  repo = 'Shougo/deoplete.nvim'
  if = 'has("nvim")'
  on_path = '.*'
  hook_source = 'call dein_hook#deoplete#source()'

[[plugins]]
  repo = 'Shougo/neosnippet-snippets'

[[plugins]]
  repo = 'Shougo/neosnippet'
  on_path = '.*'
  depends = 'neosnippet-snippets'
  hook_source = 'call dein_hook#neosnippet#source()'

## Text objects
[[plugins]] # define your own operator easily
  repo = 'kana/vim-operator-user'

[[plugins]] # operator mapping to enclose text objects with surrounds
  repo = 'rhysd/vim-operator-surround'
  on_path = '.*'
  depends = 'vim-operator-user'

[[plugins]] # visually select increasingly larger regions of text
  repo = 'terryma/vim-expand-region'
  on_path = '.*'
  hook_add = '''
    vmap v <Plug>(expand_region_expand)
    vmap <C-v> <Plug>(expand_region_shrink)
  '''

## Search
[[plugins]] # improved incremental searching
  repo = 'haya14busa/incsearch.vim'
  on_map = '<Plug>(incsearch'
  hook_add = '''
    map /  <Plug>(incsearch-forward)
    map ?  <Plug>(incsearch-backward)
    map g/ <Plug>(incsearch-stay)
  '''

[[plugins]] # improved ft command
  repo = 'chrisbra/improvedft'
  on_path = '.*'

## Filer
[[plugins]] # function navigator for CtrlP
  repo = 'tacahiroy/ctrlp-funky'

[[plugins]] # command line history navigation for CtrlP
  repo = 'suy/vim-ctrlp-commandline'

[[plugins]] # Fuzzy file, buffer, mru, tag, etc finder
  repo = 'ctrlpvim/ctrlp.vim'
  depends = ['ctrlp-funky', 'vim-ctrlp-commandline']
  hook_add = '''
    nnoremap <Leader>o :CtrlP<CR>
    let g:netrw_bufsettings='noma nomod nu nobl nowrap ro'
    let g:netrw_liststyle=3
    let g:netrw_list_hide='^\._.*$,^\.DS_Store$,^\.git/$'
  '''
  hook_source = 'call dein_hook#ctrlp#source()'

[[plugins]]
  repo = 'spolu/dwm.vim'
  on_map = '<Plug>DWM'
  hook_add = '''
    nmap <C-n> <Plug>DWMNew
    nmap <C-c> <Plug>DWMClose
    nmap <C-@> <Plug>DWMFocus
    nmap <C-l> <Plug>DWMGrowMaster
    nmap <C-h> <Plug>DWMShrinkMaster
  '''

## Runner
[[plugins]]
  repo = 'thinca/vim-quickrun.git'
  on_cmd = 'QuickRun'
  hook_add = '''
    let g:quickhl_config = {'_': {'split': 'vertical'}}
    nnoremap <leader>r :QuickRun<CR>
  '''

# [[plugins]]
#   repo = 'osyo-manga/vim-watchdogs'
#   depends = [
#     'vim-quickrun',
#     'shabadou.vim',
#     'vim-hier',
#     'quickfixstatus'
#   ]

## Languages
### C/C++
[[plugins]]
  repo = 'osyo-manga/vim-marching'
  on_ft = ['cpp', 'c']
  hook_add = '''
    let g:marching_clang_command='clang'
    let g:marching_include_paths=['/usr/include/c++', '/usr/local/include/c++']
    let g:marching_enable_neocomplete=1
  '''
  # let g:marching_backend='sync_clang_command'

### Ruby
[[plugins]]
  repo = 'rails.vim'
  on_ft = 'ruby'

[[plugins]]
  repo = 'tpope/vim-rails'
  on_ft = 'ruby'

[[plugins]]
  repo = 'tpope/vim-rake'
  on_ft = 'ruby'

[[plugins]]
  repo = 'tpope/vim-projectionist'
  on_ft = 'ruby'

[[plugins]]
  repo = 'thoughtbot/vim-rspec'
  on_ft = 'ruby'

### Python
[[plugins]]
  repo = 'davidhalter/jedi-vim'
  if = 'has("lua")'
  on_ft = 'python'
  hook_add = '''
    let g:jedi#completions_enabled = 0
    let g:jedi#auto_vim_configuration = 0
  '''

[[plugins]]
  repo = 'zchee/deoplete-jedi'
  if = 'has("nvim")'
  on_ft = 'python'

### HTML
[[plugins]]
  repo = 'lilydjwg/colorizer'
  on_ft = 'html'

[[plugins]]
  repo = 'vim-scripts/HTML-AutoCloseTag'
  on_ft = 'html'

[[plugins]]
  repo = 'mutewinter/vim-markdown'
  on_ft = 'markdown'
